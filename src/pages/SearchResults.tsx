import React, { useEffect, useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Header } from '../components/Header';
// Mock search data - in a real app, this would come from an API
const mockArticles = [{
  id: 'lang-mong-phu',
  title: 'L√†ng M√¥ng Ph·ª•',
  type: 'dia-diem',
  excerpt: 'L√†ng M√¥ng Ph·ª• l√† l√†ng c·ªï trung t√¢m c·ªßa ƒê∆∞·ªùng L√¢m, n∆°i b·∫£o t·ªìn nhi·ªÅu ng√¥i nh√† c·ªï nh·∫•t v·ªõi ki·∫øn tr√∫c ƒë·∫∑c tr∆∞ng b·∫±ng ƒë√° ong.',
  image: 'https://placehold.co/600x400?text=Mong+Phu'
}, {
  id: 'den-phung-hung',
  title: 'ƒê·ªÅn th·ªù Ph√πng H∆∞ng',
  type: 'dia-diem',
  excerpt: 'ƒê·ªÅn th·ªù Ph√πng H∆∞ng l√† n∆°i t∆∞·ªüng nh·ªõ v·ªã anh h√πng d√¢n t·ªôc ƒë√£ l√£nh ƒë·∫°o cu·ªôc kh·ªüi nghƒ©a ch·ªëng l·∫°i qu√¢n ƒë√¥ h·ªô nh√† ƒê∆∞·ªùng.',
  image: 'https://placehold.co/600x400?text=Den+Phung+Hung'
}, {
  id: 'den-ngo-quyen',
  title: 'ƒê·ªÅn th·ªù Ng√¥ Quy·ªÅn',
  type: 'dia-diem',
  excerpt: 'ƒê·ªÅn th·ªù Ng√¥ Quy·ªÅn l√† n∆°i t∆∞·ªüng nh·ªõ v·ªã vua ƒë·∫ßu ti√™n c·ªßa nh√† n∆∞·ªõc phong ki·∫øn ƒë·ªôc l·∫≠p Vi·ªát Nam sau chi·∫øn th·∫Øng B·∫°ch ƒê·∫±ng.',
  image: 'https://placehold.co/600x400?text=Den+Ngo+Quyen'
}, {
  id: 'che-lam',
  title: 'Ch√® lam ƒê∆∞·ªùng L√¢m',
  type: 'am-thuc',
  excerpt: 'Ch√® lam l√† ƒë·∫∑c s·∫£n n·ªïi ti·∫øng c·ªßa ƒê∆∞·ªùng L√¢m, ƒë∆∞·ª£c l√†m t·ª´ b·ªôt n·∫øp, g·ª´ng, m·∫≠t m√≠a v√† ƒë·∫≠u ph·ªông.',
  image: 'https://placehold.co/600x400?text=Che+Lam'
}, {
  id: 'tuong-ban',
  title: 'T∆∞∆°ng b·∫ßn',
  type: 'am-thuc',
  excerpt: 'T∆∞∆°ng b·∫ßn l√† lo·∫°i t∆∞∆°ng ƒë·∫∑c bi·ªát ƒë∆∞·ª£c l√†m t·ª´ ƒë·∫≠u t∆∞∆°ng l√™n men theo c√¥ng th·ª©c truy·ªÅn th·ªëng.',
  image: 'https://placehold.co/600x400?text=Tuong+Ban'
}];
const SearchResults = () => {
  const location = useLocation();
  const query = new URLSearchParams(location.search).get('q') || '';
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [filters, setFilters] = useState({
    type: 'all'
  });
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    setIsLoading(true);
    // Simulate API call delay
    setTimeout(() => {
      const results = mockArticles.filter(article => {
        const matchesQuery = article.title.toLowerCase().includes(query.toLowerCase()) || article.excerpt.toLowerCase().includes(query.toLowerCase());
        const matchesType = filters.type === 'all' || article.type === filters.type;
        return matchesQuery && matchesType;
      });
      setSearchResults(results);
      setIsLoading(false);
    }, 500);
  }, [query, filters]);
  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters({
      ...filters,
      type: e.target.value
    });
  };
  return <div className="w-full min-h-screen bg-white text-gray-800 font-sans">
      <Header />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-5xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-amber-800 mb-2">
              K·∫øt qu·∫£ t√¨m ki·∫øm
            </h1>
            <p className="text-lg text-gray-600">
              {searchResults.length} k·∫øt qu·∫£ cho t·ª´ kh√≥a "{query}"
            </p>
          </div>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-700 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <span className="font-medium">L·ªçc k·∫øt qu·∫£:</span>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-700 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
                <label htmlFor="type-filter" className="mr-2">
                  Lo·∫°i:
                </label>
                <select id="type-filter" value={filters.type} onChange={handleFilterChange} className="border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-amber-500">
                  <option value="all">T·∫•t c·∫£</option>
                  <option value="dia-diem">ƒê·ªãa ƒëi·ªÉm</option>
                  <option value="am-thuc">·∫®m th·ª±c</option>
                </select>
              </div>
            </div>
          </div>
          {isLoading ? <div className="flex justify-center items-center py-20">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-700"></div>
            </div> : searchResults.length > 0 ? <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {searchResults.map(result => <Link key={result.id} to={`/${result.type}/${result.id}`} className="flex bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                  <div className="w-1/3">
                    <img src={result.image} alt={result.title} className="w-full h-full object-cover" />
                  </div>
                  <div className="w-2/3 p-4">
                    <span className="inline-block px-2 py-1 bg-amber-100 text-amber-800 text-xs rounded-full mb-2">
                      {result.type === 'dia-diem' ? 'ƒê·ªãa ƒëi·ªÉm' : '·∫®m th·ª±c'}
                    </span>
                    <h2 className="text-xl font-bold mb-2 text-amber-800">
                      {result.title}
                    </h2>
                    <p className="text-gray-600 text-sm">{result.excerpt}</p>
                  </div>
                </Link>)}
            </div> : <div className="text-center py-20">
              <div className="text-5xl mb-4">üòï</div>
              <h2 className="text-2xl font-bold mb-2">
                Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o
              </h2>
              <p className="text-gray-600 mb-6">
                Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "{query}". Vui l√≤ng th·ª≠
                l·∫°i v·ªõi t·ª´ kh√≥a kh√°c.
              </p>
              <Link to="/" className="inline-flex items-center text-amber-700 hover:text-amber-800 font-medium">
                ‚Üê Quay l·∫°i trang ch·ªß
              </Link>
            </div>}
        </div>
      </div>
      <footer className="bg-amber-900 text-white py-8 mt-12">
        <div className="container mx-auto px-4">
          <div className="border-t border-amber-800 pt-6 text-center">
            <p>¬© 2025 L√†ng c·ªï ƒê∆∞·ªùng L√¢m. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          </div>
        </div>
      </footer>
    </div>;
};
export default SearchResults;